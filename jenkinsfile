pipeline {
    options {
        buildDiscarder(logRotator(numToKeepStr: '5', artifactNumToKeepStr: '5'))
    }

    agent any

    tools {
        maven 'maven_3.9.6'
    }

    stages {
        stage('Code Compilation') {
            steps {
                echo 'Code Compilation is started'
                sh 'mvn clean compile'
                echo 'Code Compilation is Completed Successfully!'
            }
        }
        stage('Code QA Execution') {
            steps {
                echo 'Junit Test case check in Progress!'
                sh 'mvn clean test'
            }
        }
        stage('Sonarqube') {
            environment {
                scannerHome = tool 'SonarQubeScanner'
            }
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh "${scannerHome}/bin/sonar-scanner"
                    sh 'mvn sonar:sonar'
                }
                timeout(time: 10, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Code Package') {
            steps {
                echo 'Creating War Artifact'
                sh 'mvn clean package'
                echo 'MVN package is completed'
            }
        }
        stage('Building & Tag Docker Image') {
            steps {
                echo 'Starting Building Docker Image'
                sh 'docker build -t moin2410/laptop-ms .'
                sh 'docker build -t laptop-ms .'
                echo 'Completed Building Docker Image'
            }
        }
        stage('Docker Image Scanning') {
            steps {
                echo 'Docker Image Scanning Started'
                sh 'java -version'
                echo 'Docker Image Scanning Started'
            }
        }
        stage('Docker push to Docker Hub') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'DockerhubCred', variable: 'DockerhubCred')]){
                        sh 'docker login docker.io -u moin2410 -p ${DockerhubCred}'
                        echo "Push Docker Image to DockerHub : In Progress"
                        sh 'docker push moin2410/laptop-ms:latest'
                        echo "Push Docker Image to DockerHub : Completed"
                    }
                }
            }
        }
        stage('Docker Image Push to Amazon ECR') {
            steps {
                script {
                    withDockerRegistry([credentialsId:'ecr:ap-south-1:ecr-credentials', url: "https://454428789626.dkr.ecr.ap-south-1.amazonaws.com/laptop-ms"]){
                        sh """
                        echo "Tagging the Docker Image: In Progress"
                        docker tag laptop-ms:latest 454428789626.dkr.ecr.ap-south-1.amazonaws.com/laptop-ms:latest
                        echo "Tagging the Docker Image : Completed"
                        echo "Push Docker Image to ECR : In Progress"
                        docker push 454428789626.dkr.ecr.ap-south-1.amazonaws.com/laptop-ms:latest
                        echo "Push Docker Image to ECR : Completed"
                        """
                    }
                }
            }
        }
        stage('Upload the docker Image to Nexus') {
            steps {
                script {
                    withCredentials ([usernamePassword(credentialsId: 'nexuscred', usernameVariable: 'USERNAME' , passwordVariable: 'PASSWORD')]) {
                        sh 'docker login http://13.127.208.123:8085/repository/laptop-ms/ -u admin -p ${PASSWORD}'
                        echo "Push Docker Image to Nexus: In Progress"
                        sh 'docker tag laptop-ms 13.127.208.123:8085/laptop-ms:latest'
                        sh 'docker push 13.127.208.123:8085/laptop-ms'
                        echo "Push Docker Image to Nexus: Completed"
                    }
                }
            }
        }
        stage('Delete images from Jenkins') {
            steps {
                sh 'docker rmi -f $(docker images -q)'
                sh 'docker images'
            }
        }
    }
}
